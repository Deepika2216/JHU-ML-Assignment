2+5
a=2+5
b=4+5
install.packages ('caret')
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("rpart")
-code-load(olive)-/code-
source('~/Downloads/olive', encoding = 'UTF-8')
library(pgmm)
data(olive)
olive = olive[,-1]
-code-olive-/code-
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("caret")
install.packages("ModelMetrics")
## Remove all extra files and keep only final data ##
library(gdata)
keep(final_data, sure = TRUE)
## Read FormA - total rows = 17980 ##
form_a = read.csv('FormA.csv')
## Read FormA - total rows = 17980 ##
form_a = read.csv('FormA.csv')
## Read FormA - total rows = 17980 ##
form_a = read.csv('FormA.csv')
FormA <- read.csv("~/Downloads/FormA.csv")
View(FormA)
## Read FormA - total rows = 17980 ##
form_a = read.csv('FormA.csv')
## Remove duplicates - total rows = 17659 ##
form_a = unique(form_a)
View(FormA)
form_a = form_a[,c(1, 2, 4:6, 16:21, 28:30, 32:36, 40:42, 46:51, 62:64, 68)]
library(caret)
library(rpart)
library(rpart.plot)
install.packages(rpart.plot)
install.packages("rpart.plot")
library(caret)
library(rpart)
library(RColorBrewer)
library(rattle)
install.packages("rattle")
install.packages("Rcmdr")
install.packages("RGtk2")
library(RGtk2)
install.packages("https://rattle.togaware.com/src/contrib/rattle_5.3.3.zip", repos=NULL)
> install.packages("RGtk2")
> library("RGtk2")
install.packages("RGtk2")
library("RGtk2")
install.packages('versions')
install.versions(rattle, <3.3.3>)
install.versions("rattle, <1.1.463>")
require(devtools)
install_version("rattle", version = "1.1.463", repos = "http://cran.us.r-project.org")
install_version("rattle", version = "3.3.3", repos = "http://cran.us.r-project.org")
library(rattle)
install.packages("https://togaware.com/access/rattle_5.0.14.tar.gz", repos=NULL, type="source")
install.packages("RGtk2")
library(RGtk2)
sudo port install gtk2
install(gtk2)
install("gtk2")
library(gWidgets)
options("guiToolkit"="RGtk2")
win <- gwindow("Test Window")
glabel("MyLabel", container = win)
gedit("Sample text.", container = win)
install.packages("rattle", dependencies=c("Depends", "Suggests"))
library(rattle)
library(randomForest)
set.seed(12345)
setwd("~/Desktop/ML assignment")
setwd("~/Desktop/ML assignment")
trainUrl <- "pml-test.csv"
testUrl <- "pml-test.csv"
set.seed(160192)
set.seed(2216)
trainUrl <- "pml-train.csv"
testUrl <- "pml-test.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
set.seed(141018)
trainUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
dim(myTraining)
dim(myTesting)
myDataNZV <- nearZeroVar(myTraining, saveMetrics=TRUE)
myNZVvars <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTraining <- myTraining[!myNZVvars]
dim(myTraining)
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining #creating another subset to iterate in loop
for(i in 1:length(myTraining)) { #for every column in the training dataset
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .6 ) { #if n?? NAs > 60% of total observations
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
dim(trainingV3)
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])
myTesting <- myTesting[clean1]
testing <- testing[clean2]
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) ==1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
library(rpart.plot)
library("rpart.plot")
install.packages("GTK+")
install.packages("rpart.plot.version1")
predictionsA1 <- predict(modFitA1, myTesting, type = "class")
confusionMatrix(predictionsA1, myTesting$classe)
modFitB1 <- randomForest(classe ~. , data=myTraining)
predictionsB1 <- predict(modFitB1, myTesting, type = "class")
confusionMatrix(predictionsB1, myTesting$classe)
predictionsB2 <- predict(modFitB1, testing, type = "class")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(predictionsB2)
